


//It should be necessary calculate totalhours if user worked less than default shift duration


import 'package:flutter/material.dart';
import 'dart:async';
import 'package:flutter_circular_chart/flutter_circular_chart.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {

  final GlobalKey<AnimatedCircularChartState> _chartKey = new GlobalKey<AnimatedCircularChartState>();
  final _chartSize = const Size(250.0, 250.0);
  Color labelColor;
  List<CircularStackEntry> _generateChartData(int minute, int second){
    double tempSec = second*0.6;
    double adjustedSeconds = second + tempSec;

    double tempMin = minute*0.6;
    double adjustedMinutes = minute + tempMin;

    Color dialColor = Colors.pink;
    labelColor = dialColor;

    List<CircularStackEntry> data = [
      new CircularStackEntry(
          [new CircularSegmentEntry(adjustedSeconds, dialColor)]
      )
    ];

    if(minute > 0){
      labelColor = Colors.orange;
      data.removeAt(0);
      data.add(
        new CircularStackEntry(
            [new CircularSegmentEntry(adjustedSeconds, dialColor)]
        ),
      );
      data.add(
        new CircularStackEntry(
            [new CircularSegmentEntry(adjustedMinutes, Colors.orange)]
        ),
      );
    }
    return data;
  }

  Stopwatch watch = new Stopwatch();
  Timer timer;
  String elapsedTime = '';

  updateTime(Timer timer){
    if(watch.isRunning) {
      var milliseconds = watch.elapsedMilliseconds;
      int hundreds = (milliseconds / 10).truncate();
      int seconds = (hundreds / 100).truncate();
      int minutes = (seconds / 60).truncate();
      setState(() {
        elapsedTime = transformMilliseconds(watch.elapsedMilliseconds);
        if(seconds > 59){
          seconds = seconds - (59*minutes);
          seconds = seconds - minutes;
        }
        List<CircularStackEntry> data = _generateChartData(minutes, seconds);
        _chartKey.currentState.updateData(data);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    TextStyle _labelStyle = Theme
        .of(context)
        .textTheme
        .title
        .merge(new TextStyle(color: labelColor));
    return new Scaffold(
      appBar: new AppBar(
        centerTitle: true,
        title: new Text('StopWatch'),
      ),
      body: new Container(
        padding: EdgeInsets.all(20.0),
        child: new Column(
          children: <Widget>[
            //new Text(elapsedTime, style: new TextStyle(fontSize: 25.0)),
            new Container(
              child: new AnimatedCircularChart(
                key: _chartKey,
                size: _chartSize,
                initialChartData: _generateChartData(0, 0),
                chartType: CircularChartType.Radial,
                edgeStyle: SegmentEdgeStyle.round,
                percentageValues: true,
                holeLabel: elapsedTime,
                labelStyle: _labelStyle,
              ),
            ),
            new Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  new FloatingActionButton(
                    backgroundColor: Colors.green,
                    onPressed: startWatch,
                    child: new Icon(Icons.play_arrow),
                  ),
                  SizedBox(width: 20.0),
                  new FloatingActionButton(
                    backgroundColor: Colors.red,
                    onPressed: stopWatch,
                    child: new Icon(Icons.stop),
                  ),
                  SizedBox(width: 20.0),
                  new FloatingActionButton(
                    backgroundColor: Colors.blue,
                    onPressed: resetWatch,
                    child: new Icon(Icons.refresh),
                  )
                ]
            )
          ],
        ),
      ),
    );
  }

  startWatch(){
    watch.start();
    timer = new Timer.periodic(new Duration(milliseconds: 100), updateTime);
  }
  stopWatch(){
    watch.stop();
    setTime();
  }
  resetWatch(){
    watch.reset();
    setTime();
    List<CircularStackEntry> data = _generateChartData(0, 0);
    _chartKey.currentState.updateData(data);
  }
  setTime() {
    var timeSoFar = watch.elapsedMilliseconds;
    setState(() {
      elapsedTime = transformMilliseconds(timeSoFar);
    });
  }
  transformMilliseconds(int milliseconds){
    int hundreds = (milliseconds/10).truncate();
    int seconds = (hundreds/100).truncate();
    int minutes = (seconds/60).truncate();

    String minutesStr = (minutes % 60).toString().padLeft(2, '0');
    String secondsStr = (seconds % 60).toString().padLeft(2, '0');

    return "$minutesStr:$secondsStr";
  }
}


Container(
                  padding : EdgeInsets.fromLTRB(600, 0, 100, 0),
                  margin: EdgeInsets.fromLTRB(0, 50, 0, 0),
                  child: new AnimatedCircularChart(
                    size: const Size(200.0, 200.0),

                    initialChartData:  <CircularStackEntry>[
                      new CircularStackEntry(
                        <CircularSegmentEntry>[
                          new CircularSegmentEntry(60, Colors.lightGreenAccent, rankKey: 'Q1'),
                          new CircularSegmentEntry((100.00-60),Colors.blueGrey[600], rankKey: 'Q2'),
                        ],
                      ),
                    ],
                    chartType: CircularChartType.Pie,
                    edgeStyle: SegmentEdgeStyle.round,
                  ),
                )



                 Container(

                                        margin: EdgeInsets.fromLTRB(0, 50, 0, 0),
                                        child: new AnimatedCircularChart(
                                          size: const Size(200.0, 200.0),
                                          initialChartData: <CircularStackEntry>[
                                            new CircularStackEntry(
                                              <CircularSegmentEntry>[
                                                new CircularSegmentEntry(
                                                  60,
                                                  Colors.lightGreenAccent,
                                                  rankKey: 'completed',
                                                ),
                                                new CircularSegmentEntry(
                                                  100,
                                                  Colors.blueGrey[600],
                                                  rankKey: 'remaining',
                                                ),
                                              ],
                                              rankKey: 'progress',
                                            ),
                                          ],
                                          chartType: CircularChartType.Radial,
                                          edgeStyle: SegmentEdgeStyle.round,
                                          percentageValues: true,
                                          holeLabel: "60%",
                                          labelStyle: percentageValueLabel,
                                        )

                                    ),